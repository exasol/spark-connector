<!--
 To disable scalastyle check for a block of code,

 // scalastyle:off
 ... // some block of code
 // scalastyle:on

 To disable for a single rule,

 // scalastyle:off method.name
 def ::[B >: A](x: B) = ...
 // scalastyle:on method.name

-->
<scalastyle>
  <name>Spark Exasol Scalastyle Configurations (adapted from Spark Scala Style Guide)</name>

  <!-- Check there are no tabs in a file -->
  <check level="error"
    class="org.scalastyle.file.FileTabChecker"
    enabled="true">
  </check>

  <!-- Check that the plus sign is followed by a space -->
  <check level="error"
    class="org.scalastyle.scalariform.SpacesAfterPlusChecker"
    enabled="true">
  </check>

  <!-- Check that the plus sign is preceded by a space -->
  <check level="error"
    class="org.scalastyle.scalariform.SpacesBeforePlusChecker"
    enabled="true">
  </check>

  <!-- Check that there is no trailing whitespace at the end of lines -->
  <check level="error"
    class="org.scalastyle.file.WhitespaceEndOfLineChecker"
    enabled="true">
  </check>

  <!-- Check the number of characters in a line -->
  <check level="error" class="org.scalastyle.file.FileLineLengthChecker" enabled="true">
    <parameters>
      <parameter name="maxLineLength"><![CDATA[120]]></parameter>
      <parameter name="tabSize"><![CDATA[2]]></parameter>
      <parameter name="ignoreImports">true</parameter>
    </parameters>
  </check>

  <!-- Check that class names match a regular expression -->
  <check level="error" class="org.scalastyle.scalariform.ClassNamesChecker" enabled="true">
    <parameters>
      <parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter>
    </parameters>
  </check>

  <!-- Check that object names match a regular expression -->
  <check level="error" class="org.scalastyle.scalariform.ObjectNamesChecker" enabled="true">
    <parameters>
      <parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter>
    </parameters>
  </check>

  <!-- Check that package object names match a regular expression -->
  <check level="error"
    class="org.scalastyle.scalariform.PackageObjectNamesChecker" enabled="true">
    <parameters>
      <parameter name="regex"><![CDATA[^[a-z][A-Za-z]*$]]></parameter>
    </parameters>
  </check>

  <!-- Maximum number of parameters for a method, after a certain number
       can be hard to understand and keep track
  -->
  <check level="error" class="org.scalastyle.scalariform.ParameterNumberChecker" enabled="true">
    <parameters>
      <parameter name="maxParameters"><![CDATA[8]]></parameter>
    </parameters>
  </check>

  <!-- Check that classes and objects do not define the finalize() method -->
  <check level="error"
    class="org.scalastyle.scalariform.NoFinalizeChecker"
    enabled="true">
  </check>

  <!-- Check that classes and objects do not define equals without overriding
       equals(java.lang.Object)
  -->
  <check level="error"
    class="org.scalastyle.scalariform.CovariantEqualsChecker"
    enabled="true">
  </check>

  <!-- Structural types in Scala can use reflection - this can have unexpected
       performance consequences
  -->
  <check level="error"
    class="org.scalastyle.scalariform.StructuralTypeChecker"
    enabled="true">
  </check>

  <!-- Checks that if a long literal is used, then an uppercase L is used -->
  <check level="error"
    class="org.scalastyle.scalariform.UppercaseLChecker"
    enabled="true">
  </check>

  <!-- Checks that if statements have braces -->
  <check level="error" class="org.scalastyle.scalariform.IfBraceChecker" enabled="true">
    <parameters>
      <parameter name="singleLineAllowed"><![CDATA[true]]></parameter>
      <parameter name="doubleLineAllowed"><![CDATA[false]]></parameter>
    </parameters>
  </check>

  <!-- Check that a method has an explicit return type, it is not inferred -->
  <check level="error"
    class="org.scalastyle.scalariform.PublicMethodsHaveTypeChecker" enabled="true">
    <parameters>
      <parameter name="ignoreOverride">false</parameter>
    </parameters>
  </check>

  <!-- Checks that a file ends with a newline character -->
  <check level="error"
    class="org.scalastyle.file.NewLineAtEofChecker"
    enabled="true">
  </check>

  <!-- Checks that non-ascii characters are not used. Some editors are unfriendly
       to non ascii characters.
  -->
  <check customId="nonascii"
    level="error"
    class="org.scalastyle.scalariform.NonASCIICharacterChecker"
    enabled="true">
  </check>

  <!-- Checks a space after the start of the comment -->
  <check level="error"
    class="org.scalastyle.scalariform.SpaceAfterCommentStartChecker"
    enabled="true">
  </check>

  <!-- Ensure single space before certain token(s) -->
  <check level="error"
    class="org.scalastyle.scalariform.EnsureSingleSpaceBeforeTokenChecker"
    enabled="true">
    <parameters>
      <parameter name="tokens">EQUALS, ELSE, TRY, CATCH, FINALLY, LARROW, RARROW</parameter>
    </parameters>
  </check>

  <!-- Ensure single space after certain token(s) -->
  <check level="error"
    class="org.scalastyle.scalariform.EnsureSingleSpaceAfterTokenChecker"
    enabled="true">
    <parameters>
      <parameter name="tokens">ARROW, EQUALS, COMMA, COLON, IF, ELSE, DO, WHILE, FOR, MATCH, TRY, CATCH, FINALLY, LARROW, RARROW</parameter>
    </parameters>
  </check>

  <!-- Checks '???' are not checked into the code base -->
  <check level="error"
    class="org.scalastyle.scalariform.NotImplementedErrorUsage"
    enabled="true">
  </check>

  <!-- Custom Check: 'println' should not be used -->
  <check customId="println"
    level="error" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
    <parameters>
      <parameter name="regex">^println$</parameter>
    </parameters>
    <customMessage><![CDATA[
      Are you sure you want to println? If yes, wrap the code block with
      // scalastyle:off println
      println(...)
      // scalastyle:on println]]>
    </customMessage>
  </check>

  <!-- Custom Check: 'hadoopConfiguration' should not be used -->
  <check customId="hadoopConfiguration"
    level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
    <parameters>
      <parameter name="regex">spark(.sqlContext)?.sparkContext.hadoopConfiguration</parameter>
    </parameters>
    <customMessage><![CDATA[
      Are you sure that you want to use sparkContext.hadoopConfiguration?
      In most cases, you should use spark.sessionState.newHadoopConf() instead,
      so that the hadoop configurations specified in Spark session configuration
      will come into effect.

      If you must use sparkContext.hadoopConfiguration, wrap the code block with
      // scalastyle:off hadoopconfiguration
      spark.sparkContext.hadoopConfiguration...
      // scalastyle:on hadoopconfiguration]]>
    </customMessage>
  </check>

  <!-- Custom Check: 'Runtime.getRuntime.addShutdownHook' should not be used -->
  <check customId="runtimeaddShutdownHook"
    level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
    <parameters>
      <parameter name="regex">Runtime\.getRuntime\.addShutdownHook</parameter>
    </parameters>
    <customMessage><![CDATA[
      Are you sure that you want to use Runtime.getRuntime.addShutdownHook?
      In most cases, you should use ShutdownHookManager.addShutdownHook instead.

      If you must use Runtime.getRuntime.addShutdownHook, wrap the code block with
      // scalastyle:off runtimeaddshutdownhook
      Runtime.getRuntime.addShutdownHook(...)
      // scalastyle:on runtimeaddshutdownhook]]>
    </customMessage>
  </check>

  <!-- Custom Check: 'mutable.SynchronizedBuffer' should not be used -->
  <check customId="mutableSynchronizedbuffer"
    level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
    <parameters>
      <parameter name="regex">mutable\.SynchronizedBuffer</parameter>
    </parameters>
    <customMessage><![CDATA[
      Are you sure that you want to use mutable.SynchronizedBuffer?
      In most cases, you should use java.util.concurrent.ConcurrentLinkedQueue instead.

      If you must use mutable.SynchronizedBuffer, wrap the code block with
      // scalastyle:off mutablesynchronizedbuffer
      mutable.SynchronizedBuffer[...]
      // scalastyle:on mutablesynchronizedbuffer]]>
    </customMessage>
  </check>

  <!-- Custom Check: 'Class.forName' should not be used -->
  <check customId="classForName"
    level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
    <parameters>
      <parameter name="regex">Class\.forName</parameter>
    </parameters>
    <customMessage><![CDATA[
      Are you sure that you want to use Class.forName?
      In most cases, you should use Utils.classForName instead.

      If you must use Class.forName, wrap the code block with
      // scalastyle:off classForName
      Class.forName(...)
      // scalastyle:on classForName]]>
    </customMessage>
  </check>

  <!-- Custom Check: 'Await.result' should not be used -->
  <check customId="awaitResult"
    level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
    <parameters>
      <parameter name="regex">Await\.result</parameter>
    </parameters>
    <customMessage><![CDATA[
      Are you sure that you want to use Await.result?
      In most cases, you should use ThreadUtils.awaitResult instead.

      If you must use Await.result, wrap the code block with
      // scalastyle:off awaitresult
      Await.result(...)
      // scalastyle:on awaitresult]]>
    </customMessage>
  </check>

  <!-- Custom Check: 'Await.ready' should not be used -->
  <check customId="awaitReady"
    level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
    <parameters>
      <parameter name="regex">Await\.ready</parameter>
    </parameters>
    <customMessage><![CDATA[
      Are you sure that you want to use Await.ready?
      In most cases, you should use ThreadUtils.awaitReady instead.

      If you must use Await.ready, wrap the code block with
      // scalastyle:off awaitready
      Await.ready(...)
      // scalastyle:on awaitready]]>
    </customMessage>
  </check>

  <!-- Custom Check: 'JavaConverters' should be used instead of 'JavaConversions' -->
  <check customId="javaConversions"
    level="error" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
    <parameters>
      <parameter name="regex">JavaConversions</parameter>
    </parameters>
    <customMessage><![CDATA[
      Instead of importing implicits in scala.collection.JavaConversions._
      use instead import scala.collection.JavaConverters._
      and use .asScala / .asJava methods]]>
    </customMessage>
  </check>

  <!-- Custom Check: 'apache.commons.lang3' should be used instead of 'apache.commons.lang' -->
  <check customId="commonsLang2"
    level="error" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
    <parameters>
      <parameter name="regex">org\.apache\.commons\.lang\.</parameter>
    </parameters>
    <customMessage><![CDATA[
      Use Commons Lang 3 classes (package org.apache.commons.lang3.*)
      instead of Commons Lang 2 (package org.apache.commons.lang.*)]]>
    </customMessage>
  </check>

  <!-- Custom Check: 'jsonOption(x).map(.extract[T])' should be used
       instead of '.extractOpt[T]'
  -->
  <check customId="extractOpt"
    level="error" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
    <parameters>
      <parameter name="regex">extractOpt</parameter>
    </parameters>
    <customMessage><![CDATA[
      Use jsonOption(x).map(.extract[T]) instead of .extractOpt[T],
      as the latter is slower.]]>
    </customMessage>
  </check>

  <!-- Custom Check: There should be space between ')' and '{' -->
  <check customId="singleSpaceBetweenRParenAndLCurlyBrace"
    level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
    <parameters>
      <parameter name="regex">\)\{</parameter>
    </parameters>
    <customMessage><![CDATA[
      There should be a single space character between ')' and `{`]]>
    </customMessage>
  </check>

  <!-- Custom Check: JavaDoc style should be used -->
  <check customId="noScalaDoc"
    level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
    <parameters>
      <parameter name="regex">(?m)^(\s*)/[*][*].*$(\r|)\n^\1  [*]</parameter>
    </parameters>
    <customMessage><![CDATA[
      Use Javadoc style indentation for multiline comments]]>
    </customMessage>
  </check>

  <!-- Custom Check: Braces should be omitted in case clauses -->
  <check customId="omitBracesInCase"
    level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
    <parameters>
      <parameter name="regex">case[^\n>]*=>\s*\{</parameter>
    </parameters>
    <customMessage><![CDATA[
      Braces in case clauses should be omitted]]>
    </customMessage>
  </check>

  <!-- Custom Check: Ensure exactly one space between 'if' and '(' -->
  <check  customId="if.paren.spacing"
    level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
    <parameters>
      <parameter name="regex"><![CDATA[if\(|if\s\s+\(]]></parameter>
    </parameters>
    <customMessage><![CDATA[
      Put exactly a single space between 'if' and the following parenthesis]]>
    </customMessage>
  </check>

  <!-- Checks that imports are grouped and ordered according to the style configuration -->
  <check level="error" class="org.scalastyle.scalariform.ImportOrderChecker" enabled="true">
    <parameters>
      <parameter name="groups">java,scala,spark,exasol,others</parameter>
      <parameter name="group.java">javax?\..*</parameter>
      <parameter name="group.scala">scala\..*</parameter>
      <parameter name="group.spark">org\.apache\.spark\..*</parameter>
      <parameter name="group.exasol">com\.exasol\..*</parameter>
      <parameter name="group.others">.*</parameter>
    </parameters>
  </check>

  <!-- Disallow space before certain token(s) -->
  <check level="error"
    class="org.scalastyle.scalariform.DisallowSpaceBeforeTokenChecker"
    enabled="true">
    <parameters>
      <parameter name="tokens">COMMA</parameter>
    </parameters>
  </check>

  <!-- Checks that Java @Override is not used, Scala override keyword should be used instead -->
  <check level="error"
    class="org.scalastyle.scalariform.OverrideJavaChecker"
    enabled="true">
  </check>

  <!-- Checks that Java @Deprecated is not used, Scala @deprecated should be used instead -->
  <check level="error"
    class="org.scalastyle.scalariform.DeprecatedJavaChecker"
    enabled="true">
  </check>

  <!-- No whitespace before left bracket '[', this can be confusing to the reader -->
  <check level="error"
    class="org.scalastyle.scalariform.NoWhitespaceBeforeLeftBracketChecker"
    enabled="true">
  </check>

  <!-- No whitespace after left bracket '[', this can be confusing to the reader -->
  <check level="error"
    class="org.scalastyle.scalariform.NoWhitespaceAfterLeftBracketChecker"
    enabled="true">
  </check>

  <!-- Check that method names match a regular expression -->
  <check level="error" class="org.scalastyle.scalariform.MethodNamesChecker" enabled="true">
    <parameters>
      <parameter name="regex"><![CDATA[^[a-z][A-Za-z0-9]*$]]></parameter>
    </parameters>
  </check>

  <!-- Checks that methods do not exceed a maximum length -->
  <check level="warn" class="org.scalastyle.scalariform.MethodLengthChecker" enabled="true">
    <parameters>
      <parameter name="maxLength"><![CDATA[120]]></parameter>
    </parameters>
  </check>

  <!-- Check that a class / trait / object does not have too many methods -->
  <check level="error"
    class="org.scalastyle.scalariform.NumberOfMethodsInTypeChecker" enabled="true">
    <parameters>
      <parameter name="maxMethods"><![CDATA[30]]></parameter>
    </parameters>
  </check>

  <!-- Checks that the cyclomatic complexity of a method does exceed a value
       If the code is too complex, then this can make code hard to read.
  -->
  <check level="warn"
    class="org.scalastyle.scalariform.CyclomaticComplexityChecker" enabled="true">
    <parameters>
      <parameter name="maximum"><![CDATA[100]]></parameter>
    </parameters>
  </check>

  <!-- Check that if a class implements either equals or hashCode,
       it should implement the other
  -->
  <check level="error"
    class="org.scalastyle.scalariform.EqualsHashCodeChecker"
    enabled="true">
  </check>

  <!-- Checks for use of magic numbers, avoids assignments like: var baz = 4 -->
  <check level="error" class="org.scalastyle.scalariform.MagicNumberChecker" enabled="true">
    <parameters>
      <parameter name="ignore"><![CDATA[-1,0,1,2,3,4,5,6,7]]></parameter>
    </parameters>
  </check>

  <!-- Check that return is not used -->
  <check level="error" class="org.scalastyle.scalariform.ReturnChecker" enabled="true"></check>

  <!-- Check that null is not used, prefer Option if possible -->
  <check level="error" class="org.scalastyle.scalariform.NullChecker" enabled="true"></check>

  <!-- Check that classes and objects do not define the clone() method -->
  <check level="error" class="org.scalastyle.scalariform.NoCloneChecker" enabled="true"></check>

  <!-- A boolean expression which can be simplified can make code easier to read -->
  <check level="error"
    class="org.scalastyle.scalariform.SimplifyBooleanExpressionChecker"
    enabled="true">
  </check>

  <!-- Checks that braces are used in for comprehensions -->
  <check level="error" class="org.scalastyle.scalariform.ForBraceChecker" enabled="true"/>

  <!-- Checks that if expressions are not redundant, i.e. easily replaced
       by a variant of the condition
  -->
  <check level="error" class="org.scalastyle.scalariform.RedundantIfChecker" enabled="true"/>

  <!-- Use a : Unit = for procedure declarations -->
  <check level="error"
    class="org.scalastyle.scalariform.ProcedureDeclarationChecker"
    enabled="true"/>

  <!-- Checks that there are not too many types declared in a file -->
  <check level="error" class="org.scalastyle.scalariform.NumberOfTypesChecker" enabled="true">
    <parameters>
      <parameter name="maxTypes"><![CDATA[30]]></parameter>
    </parameters>
  </check>

  <!-- Check a file lines does not exceed threshold (800 default) -->
  <check level="error" class="org.scalastyle.file.FileLengthChecker" enabled="true">
    <parameters>
      <parameter name="maxFileLength"><![CDATA[800]]></parameter>
    </parameters>
  </check>

  <!-- Check that certain classes are not imported -->
  <check level="error" class="org.scalastyle.scalariform.IllegalImportsChecker" enabled="true">
    <parameters>
      <parameter name="illegalImports"><![CDATA[sun._,java.awt._]]></parameter>
    </parameters>
  </check>

  <!-- We want the opposite of this: NewLineAtEofChecker -->
  <check level="error" class="org.scalastyle.file.NoNewLineAtEofChecker" enabled="false"></check>

</scalastyle>
